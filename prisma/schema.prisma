// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model User {
  id            String @id @unique
  email         String
  firstName     String
  lastName      String
  profileImage  String?

  // relationship one to many
  Home          Home[] // one to many relation
  Favorite      Favorite[] // one to many relation
  Reservation   Reservation[]
}

model Home { 
  id                String @id @default(uuid())
  title             String?
  description       String?
  guests            Int?
  bedrooms          Int?
  beds              Int?
  bathrooms         Int?
  country           String?
  photo             String?
  price             Int?
  categoryName      String?
  placeType         String?
  published         Boolean? @default(false)
  amenities         String[]
  standoutAmenties  String[]
  safetyItems       String[]

  // relationship one to many
  Favorite          Favorite[] // one to many relation
  Reservation       Reservation[]

  createdAt         DateTime @default(now())
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?

}

model Favorite {
  id        String @id @default(uuid())
  // one to many relation
  User      User? @relation(fields: [userId], references: [id]) // user can have multiple favorites
  userId    String?
  // one to many relation
  Home      Home? @relation(fields: [homeId], references: [id]) // home can have multiple favorites
  homeId    String
  createAt  DateTime @default(now())
}

model Reservation {
  id String @id @default(uuid())

  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  // one to many relation
  User   User?   @relation(fields: [userId], references: [id]) // user can have multiple reservations
  userId String?
  // one to many relation
  Home   Home?   @relation(fields: [homeId], references: [id]) // home can have multiple reservations
  homeId String?
}